#!/bin/bash

# Since we are not allowed to set variables or pollute the user's shell, we use
# a big subshell and only source a discovered venv activate script. The argument
# to source is /dev/null unless a venv is resolved, effectively making all this
# a noop if problems turn up.
source $(

  # Make shell scripting nicer:
  # 1. Disable pathname expansion for unquoted words.
  # 2. Patterns that match nothing expand to zero words.
  # 3. Enable extended pattern matching operators.
  # 4. Word split on newline ONLY.
  set -f; shopt -s nullglob extglob; IFS=$'\n'

  # Helpers.
  emit () { echo $VIRTUAL_ENV$ACTIVATE; exit; }
  warn () { echo ">>> (${LOGLEVEL:-warn}) ${1}"; } >&2
  fail () { LOGLEVEL=fail warn "${1}"; echo $DEVNULL; exit 1; }
  cleanup () { (($1)) && mv $VIRTUAL_ENV{,.$$} && rm -r $VIRTUAL_ENV.$$; } >&2
  pyexists () { $PYTHON -c 'import venv'; } >&2
  pycreate () { $PYTHON -m venv $VIRTUAL_ENV; } >&2
  pysetup () { pip install -U pip; pip install -e ${PROJECT}[dev]; } >&2
  pip () { $VIRTUAL_ENV/bin/pip "${@}"; }

  DEVNULL=/dev/null
  ACTIVATE=/bin/activate
  case $(uname -s) in
    (CYGWIN|MINGW*)
      ACTIVATE=\\Scripts\\activate
      ;;
  esac

  # Allow user to override the python to use.
  : ${PYTHON:=python3}

  # Allow user to override the base directory.
  case ${PROJECT:=${BASH_SOURCE[0]%${ACTIVATE:1}}} in
    ('') PROJECT=$(pwd);;
    (*) PROJECT=$(cd $PROJECT && pwd);;
  esac

  # Disallow operating on /.
  case $PROJECT in
    (/) fail "PROJECT not allowed here: $PROJECT";;
  esac

  # Allow user to override the venv name.
  case ${NAME:=$(basename $PROJECT)} in
    (*/*) fail "NAME must not contain slashes: $NAME";;
  esac

  # Allow user to override the venv location.
  case ${VIRTUAL_ENV:=$PROJECT/$NAME.venv} in
    ([^/]*) VIRTUAL_ENV=$(pwd)/$VIRTUAL_ENV;;
  esac

  # Use the script in the currently activated venv because it could already
  # know about some python3 we do not (not on our PATH).
  # NOTE: Parent dirs in VIRTUAL_ENV must already exist; mkdir is atomic so we
  # rely on that to avoid racing on venv creation.
  ! mkdir $VIRTUAL_ENV 2> /dev/null &&
    emit

  # We now have the venv lock and should remove it if something goes wrong.
  set -e; trap 'rc=$?; set +e; cleanup $rc; exit $rc' EXIT HUP INT QUIT TERM

  # If either python3 or the venv module is missing (some Linux distros move
  # venv to a distro package) let the user know what is needed.
  ! pyexists &&
    fail "Please make this work before coming back: $PYTHON -m venv"

  # Try to create the venv!
  ! pycreate &&
    fail "Unable to create venv: $PYTHON -m venv $VIRTUAL_ENV"

  # Try to populate the venv with dev_requires and editable install!
  ! pysetup &&
    fail "Unable to install reqs: ($VIRTUAL_ENV) pip install -e $PROJECT[dev]"

  # Everything went great!
  emit

)
